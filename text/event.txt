14.1 Lập trình hướng sự kiện
Lập trình hướng sự kiện (Event-driven programming) là mô hình lập trình trong đó luồng xử lý của chương trình được điều khiển bởi các sự kiện như:

Tác động từ người dùng (click chuột, nhập bàn phím),

Sự kiện hệ thống (kết thúc đọc/ghi tệp, kết nối mạng),

Hoặc tín hiệu từ chương trình khác.

Chương trình không thực thi từ trên xuống như thông thường mà đợi các sự kiện xảy ra, rồi gọi hàm xử lý (event handler) tương ứng.

14.2 Lập trình hướng sự kiện trong Node.js
Node.js xây dựng dựa trên mô hình hướng sự kiện. Đây là điểm mạnh giúp Node.js xử lý hiệu quả nhiều kết nối đồng thời, rất phù hợp với ứng dụng thời gian thực, ứng dụng web hoặc ứng dụng cần xử lý nhiều I/O (đọc/ghi tệp, database, API).

Ứng dụng I/O-intensive: là ứng dụng chủ yếu tiêu tốn thời gian vào thao tác nhập/xuất hơn là tính toán.

Thành phần trong mô hình hướng sự kiện của Node.js:
Event: là hành động xảy ra trong hệ thống, như nhận request, hoàn tất thao tác I/O, hoặc timeout.

EventEmitter: là đối tượng có thể phát và lắng nghe sự kiện.

.on(eventName, handler): đăng ký một hàm xử lý sự kiện.

.emit(eventName, data): phát sự kiện đó ra.

Event Loop: là vòng lặp liên tục kiểm tra hàng đợi sự kiện. Khi có sự kiện, nó sẽ thực thi callback tương ứng.

Event Handler: là các hàm phản hồi khi sự kiện xảy ra. Chúng được đăng ký trước qua on().

15.1 Lập trình hướng sự kiện trong Express
Express là một framework dựa trên Node.js nên cũng sử dụng mô hình hướng sự kiện.

Trong Express:

Request (GET, POST, …) là sự kiện (Event).

Các route handler và middleware là event handler – chúng xử lý khi sự kiện xảy ra.

Các module như http, fs, stream là event emitter.

Event loop của Node.js đảm nhận việc xử lý sự kiện bất đồng bộ.

Route Handler
Là hàm xử lý khi một request HTTP khớp với route và method cụ thể.

Được khai báo bằng app.method(path, handler).

Nhận ba tham số: req, res, next.

Có thể dùng next() để chuyển tiếp tới middleware hoặc handler tiếp theo.

Middleware
Là các hàm trung gian trong quá trình xử lý request. Chúng có thể:

Xử lý dữ liệu đầu vào (ví dụ: xác thực, logging),

Thêm thuộc tính vào req hoặc sửa đổi res,

Dừng luồng xử lý hoặc chuyển tiếp bằng next().

Các loại middleware:
Application-level middleware: áp dụng cho toàn bộ ứng dụng, dùng app.use().

Router-level middleware: áp dụng cho một nhóm route, sử dụng với express.Router().

Error-handling middleware: xử lý lỗi, có thêm tham số err.

Built-in middleware: middleware tích hợp sẵn như express.json(), express.static().

Third-party middleware: do bên thứ ba cung cấp như body-parser, cors, morgan.

