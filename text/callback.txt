    10.1 Hàm Callback là gì?
Trong JavaScript, hàm callback là một hàm được truyền như một đối số vào một hàm khác, và được thực thi sau khi hàm chứa nó hoàn thành một tác vụ nhất định. Nói cách khác, callback là một cơ chế cho phép xử lý các tác vụ bất đồng bộ theo cách "gọi lại" khi nhiệm vụ kết thúc.

Callback là một trong ba kỹ thuật chính để xử lý lập trình bất đồng bộ trong JavaScript, bên cạnh Promise và Async/Await.

Callback trong tiếng Anh nghĩa là "gọi lại" — ám chỉ việc gọi lại hàm đã truyền vào sau khi hoàn tất một hành động cụ thể.

    Đặc điểm của hàm Callback
Truyền như tham số: Một callback được truyền vào hàm khác và được gọi sau khi một hành động hoặc điều kiện nào đó hoàn thành.

Thực thi bất đồng bộ: Callback thường được dùng để xử lý các tác vụ không chặn luồng chính, như gọi API, thao tác với file, hoặc xử lý hẹn giờ.

Tính linh hoạt: Callback có thể là:

Hàm ẩn danh (anonymous function)

Hàm mũi tên (arrow function)

Hàm được định nghĩa trước (named function)

Callback Hell: Việc lồng quá nhiều callback có thể khiến mã trở nên rối rắm, khó đọc và khó bảo trì. Tình trạng này gọi là "callback hell" và thường được khắc phục bằng Promise hoặc Async/Await.

    Các tình huống thường sử dụng callback
Xử lý sự kiện: Gắn callback để phản hồi các hành động như click, hover, submit của người dùng.

Tác vụ bất đồng bộ: Ví dụ như gọi API, đọc/ghi tập tin, hoặc sử dụng setTimeout, setInterval.

Xử lý mảng: Callback được sử dụng trong các phương thức mảng như forEach(), map(), filter(), reduce().

Xác định thứ tự thực thi: Đảm bảo một hành động chỉ thực hiện sau khi hành động khác hoàn tất, chẳng hạn như tải dữ liệu từ server rồi mới hiển thị lên giao diện.

Tùy biến logic: Cho phép truyền logic xử lý riêng biệt từ bên ngoài vào một hàm tổng quát.

    Ví dụ minh họa
    Ví dụ 1: Sử dụng callback trong xử lý sự kiện

<!-- callback1.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Ví dụ callback</title>
</head>
<body>
    <button id="dang-ky">Đăng ký</button>

    <script>
        document.getElementById("dang-ky").addEventListener("click", () => {
            alert("Nút đã được bấm!");
        });
    </script>
</body>
</html>
    Mở tệp callback1.html bằng trình duyệt để thấy thông báo xuất hiện khi nhấn nút.

    Ví dụ 2: Sử dụng callback với hàm setTimeout

setTimeout(() => {
    console.log("Đã hết 5 giây! (sau 5 giây)");
}, 5000);

console.log("Đang chờ");
Kết quả khi chạy chương trình:

Đang chờ
Đã hết 5 giây! (sau 5 giây)
==Callback được thực thi sau 5 giây nhờ cơ chế bất đồng bộ.

Hạn chế của Callback
Callback Hell: Cấu trúc lồng nhau quá sâu làm mã khó hiểu và rối rắm.

Xử lý lỗi thủ công: Không có cơ chế bắt lỗi chuẩn, phải kiểm tra lỗi riêng trong từng callback.

Khó bảo trì: Đối với các chuỗi tác vụ phức tạp, việc theo dõi luồng thực thi trở nên khó khăn.

Kết luận
Callback là công cụ quan trọng trong lập trình JavaScript, đặc biệt trong các tình huống bất đồng bộ. Tuy nhiên, với những nhược điểm của mình, callback ngày nay thường được thay thế bằng Promise hoặc Async/Await để giúp mã rõ ràng và dễ bảo trì hơn.
